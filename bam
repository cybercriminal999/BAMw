$ErrorActionPreference = "SilentlyContinue"

# Banner in Red
Write-Host "__  __ __  ____     ___  ____       ____    ____  ___ ___ " -ForegroundColor Red
Write-Host "   /  ]|  |  ||    \   /  _]|    \     |    \  /    ||   |   |" -ForegroundColor Red
Write-Host "  /  / |  |  ||  o  ) /  [_ |  D  )    |  o  )|  o  || _   _ |" -ForegroundColor Red
Write-Host " /  /  |  ~  ||     ||    _]|    /     |     ||     ||  \_/  |" -ForegroundColor Red
Write-Host "/   \_ |___, ||  O  ||   [_ |    \     |  O  ||  _  ||   |   |" -ForegroundColor Red
Write-Host "\     ||     ||     ||     ||  .  \    |     ||  |  ||   |   |" -ForegroundColor Red
Write-Host " \____||____/ |_____||_____||__|\_|    |_____||__|__||___|___|" -ForegroundColor Red
Write-Host ""

Write-Host "   MADE BY CYBERTHREATS"
Write-Host ""

function Get-Signature {
    param ([string]$FilePath)

    if (-not (Test-Path $FilePath -PathType Leaf)) { return "File Was Not Found" }

    $sig = Get-AuthenticodeSignature -FilePath $FilePath -ErrorAction SilentlyContinue
    switch ($sig.Status) {
        "Valid"       { return "Valid Signature" }
        "NotSigned"   { return "Invalid Signature (NotSigned)" }
        "HashMismatch"{ return "Invalid Signature (HashMismatch)" }
        "NotTrusted"  { return "Invalid Signature (NotTrusted)" }
        default      { return "Invalid Signature (UnknownError)" }
    }
}

function Test-Admin {
    $principal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

if (-not (Test-Admin)) {
    Write-Warning "Please run this script as Administrator."
    Start-Sleep -Seconds 10
    exit
}

Clear-Host

$sw = [Diagnostics.Stopwatch]::StartNew()

if (-not (Get-PSDrive -Name HKLM -PSProvider Registry)) {
    try { New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE } catch {
        Write-Warning "Error mounting HKEY_LOCAL_MACHINE"
    }
}

$serviceNames = @("bam", "bam\State")
try {
    $users = foreach ($service in $serviceNames) {
        Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\$service\UserSettings\" -ErrorAction SilentlyContinue |
        Select-Object -ExpandProperty PSChildName
    }
} catch {
    Write-Warning "Error parsing BAM registry keys. Possibly unsupported Windows version."
    exit
}

$regPaths = @("HKLM:\SYSTEM\CurrentControlSet\Services\bam\", "HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\")

$timeZoneInfo = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation" -ErrorAction SilentlyContinue
$userTimeZone = $timeZoneInfo.TimeZoneKeyName
$userBias = $timeZoneInfo.ActiveTimeBias
$userDaylightBias = $timeZoneInfo.DaylightBias

$bamData = foreach ($sid in $users) {
    foreach ($basePath in $regPaths) {
        Write-Host -NoNewline "Extracting "
        Write-Host "$basePath`UserSettings\$sid" -ForegroundColor Blue

        $properties = Get-ItemProperty -Path "$basePath`UserSettings\$sid" -ErrorAction SilentlyContinue | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name

        try {
            $userObj = New-Object System.Security.Principal.SecurityIdentifier($sid)
            $userName = $userObj.Translate([System.Security.Principal.NTAccount]).Value
        } catch {
            $userName = "Unknown"
        }

        foreach ($prop in $properties) {
            $data = Get-ItemProperty -Path "$basePath`UserSettings\$sid" -Name $prop -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $prop

            if ($data.Length -eq 24) {
                # Convert 8 bytes from index 7 to 0 to hex (little endian)
                $hexString = [System.BitConverter]::ToString($data[7..0]) -replace '-'
                $fileTime = [Convert]::ToInt64($hexString, 16)

                $localTime = ([DateTime]::FromFileTime($fileTime)).ToString("yyyy-MM-dd HH:mm:ss")
                $utcTime = ([DateTime]::FromFileTimeUtc($fileTime)).ToString("yyyy-MM-dd HH:mm:ss")
                $userTime = ([DateTime]::FromFileTimeUtc($fileTime)).AddMinutes(-$userBias).ToString("yyyy-MM-dd HH:mm:ss")

                [PSCustomObject]@{
                    "Examiner Time" = $localTime
                    "Last Execution Time (UTC)" = $utcTime
                    "Last Execution User Time" = $userTime
                    "Application" = $prop
                    "User" = $userName
                    "SID" = $sid
                    "RegPath" = $basePath
                }
            }
        }
    }
}

if ($bamData) {
    $bamData | Out-GridView -Title "BAM key entries $($bamData.Count) - TimeZone: $userTimeZone - ActiveBias: $userBias - DaylightBias: $userDaylightBias"
} else {
    Write-Host "No BAM entries found." -ForegroundColor Yellow
}

$sw.Stop()
Write-Host ""
Write-Host ("Elapsed Time: {0:N2} minutes" -f $sw.Elapsed.TotalMinutes) -ForegroundColor Yellow
